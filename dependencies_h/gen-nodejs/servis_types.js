//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
V3 = module.exports.V3 = function(args) {
  this.x = 0;
  this.y = 0;
  this.z = 0;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
    if (args.z !== undefined) {
      this.z = args.z;
    }
  }
};
V3.prototype = {};
V3.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.x = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.z = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

V3.prototype.write = function(output) {
  output.writeStructBegin('V3');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  if (this.z !== null && this.z !== undefined) {
    output.writeFieldBegin('z', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.z);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Terrain = module.exports.Terrain = function(args) {
  this.vertices = null;
  this.indices = null;
  this.colors = null;
  if (args) {
    if (args.vertices !== undefined) {
      this.vertices = args.vertices;
    }
    if (args.indices !== undefined) {
      this.indices = args.indices;
    }
    if (args.colors !== undefined) {
      this.colors = args.colors;
    }
  }
};
Terrain.prototype = {};
Terrain.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.vertices = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.V3();
          elem6.read(input);
          this.vertices.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.indices = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI32();
          this.indices.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.colors = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new ttypes.V3();
          elem20.read(input);
          this.colors.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Terrain.prototype.write = function(output) {
  output.writeStructBegin('Terrain');
  if (this.vertices !== null && this.vertices !== undefined) {
    output.writeFieldBegin('vertices', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.vertices.length);
    for (var iter21 in this.vertices)
    {
      if (this.vertices.hasOwnProperty(iter21))
      {
        iter21 = this.vertices[iter21];
        iter21.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.indices !== null && this.indices !== undefined) {
    output.writeFieldBegin('indices', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.indices.length);
    for (var iter22 in this.indices)
    {
      if (this.indices.hasOwnProperty(iter22))
      {
        iter22 = this.indices[iter22];
        output.writeI32(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.colors !== null && this.colors !== undefined) {
    output.writeFieldBegin('colors', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.colors.length);
    for (var iter23 in this.colors)
    {
      if (this.colors.hasOwnProperty(iter23))
      {
        iter23 = this.colors[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

