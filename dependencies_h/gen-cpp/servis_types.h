/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef servis_TYPES_H
#define servis_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace servis {

typedef struct _V3__isset {
  _V3__isset() : x(true), y(true), z(true) {}
  bool x;
  bool y;
  bool z;
} _V3__isset;

class V3 {
 public:

  static const char* ascii_fingerprint; // = "EFFAD640FBA2CA56C50155B2A4545897";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

  V3(double a=0, double b=0, double c=0) : x(a), y(b), z(c) {
  }

  virtual ~V3() throw() {}

  double x;
  double y;
  double z;

  _V3__isset __isset;

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  bool operator == (const V3 & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const V3 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const V3 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(V3 &a, V3 &b);

typedef struct _Terrain__isset {
  _Terrain__isset() : vertices(false), indices(false), colors(false) {}
  bool vertices;
  bool indices;
  bool colors;
} _Terrain__isset;

class Terrain {
 public:

  static const char* ascii_fingerprint; // = "BB145DA4E142F9546FFF597B9D59B664";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x14,0x5D,0xA4,0xE1,0x42,0xF9,0x54,0x6F,0xFF,0x59,0x7B,0x9D,0x59,0xB6,0x64};

  Terrain() {
  }

  virtual ~Terrain() throw() {}

  std::vector<V3>  vertices;
  std::vector<int32_t>  indices;
  std::vector<V3>  colors;

  _Terrain__isset __isset;

  void __set_vertices(const std::vector<V3> & val) {
    vertices = val;
  }

  void __set_indices(const std::vector<int32_t> & val) {
    indices = val;
  }

  void __set_colors(const std::vector<V3> & val) {
    colors = val;
    __isset.colors = true;
  }

  bool operator == (const Terrain & rhs) const
  {
    if (!(vertices == rhs.vertices))
      return false;
    if (!(indices == rhs.indices))
      return false;
    if (__isset.colors != rhs.__isset.colors)
      return false;
    else if (__isset.colors && !(colors == rhs.colors))
      return false;
    return true;
  }
  bool operator != (const Terrain &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Terrain & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Terrain &a, Terrain &b);

} // namespace

#endif
