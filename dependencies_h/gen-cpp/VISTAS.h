/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VISTAS_H
#define VISTAS_H

#include <thrift/TDispatchProcessor.h>
#include "servis_types.h"

namespace servis {

class VISTASIf {
 public:
  virtual ~VISTASIf() {}
  virtual void getTerrain(Terrain& _return, const std::string& fileName) = 0;
};

class VISTASIfFactory {
 public:
  typedef VISTASIf Handler;

  virtual ~VISTASIfFactory() {}

  virtual VISTASIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VISTASIf* /* handler */) = 0;
};

class VISTASIfSingletonFactory : virtual public VISTASIfFactory {
 public:
  VISTASIfSingletonFactory(const boost::shared_ptr<VISTASIf>& iface) : iface_(iface) {}
  virtual ~VISTASIfSingletonFactory() {}

  virtual VISTASIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VISTASIf* /* handler */) {}

 protected:
  boost::shared_ptr<VISTASIf> iface_;
};

class VISTASNull : virtual public VISTASIf {
 public:
  virtual ~VISTASNull() {}
  void getTerrain(Terrain& /* _return */, const std::string& /* fileName */) {
    return;
  }
};

typedef struct _VISTAS_getTerrain_args__isset {
  _VISTAS_getTerrain_args__isset() : fileName(false) {}
  bool fileName;
} _VISTAS_getTerrain_args__isset;

class VISTAS_getTerrain_args {
 public:

  VISTAS_getTerrain_args() : fileName() {
  }

  virtual ~VISTAS_getTerrain_args() throw() {}

  std::string fileName;

  _VISTAS_getTerrain_args__isset __isset;

  void __set_fileName(const std::string& val) {
    fileName = val;
  }

  bool operator == (const VISTAS_getTerrain_args & rhs) const
  {
    if (!(fileName == rhs.fileName))
      return false;
    return true;
  }
  bool operator != (const VISTAS_getTerrain_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VISTAS_getTerrain_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VISTAS_getTerrain_pargs {
 public:


  virtual ~VISTAS_getTerrain_pargs() throw() {}

  const std::string* fileName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VISTAS_getTerrain_result__isset {
  _VISTAS_getTerrain_result__isset() : success(false) {}
  bool success;
} _VISTAS_getTerrain_result__isset;

class VISTAS_getTerrain_result {
 public:

  VISTAS_getTerrain_result() {
  }

  virtual ~VISTAS_getTerrain_result() throw() {}

  Terrain success;

  _VISTAS_getTerrain_result__isset __isset;

  void __set_success(const Terrain& val) {
    success = val;
  }

  bool operator == (const VISTAS_getTerrain_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VISTAS_getTerrain_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VISTAS_getTerrain_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VISTAS_getTerrain_presult__isset {
  _VISTAS_getTerrain_presult__isset() : success(false) {}
  bool success;
} _VISTAS_getTerrain_presult__isset;

class VISTAS_getTerrain_presult {
 public:


  virtual ~VISTAS_getTerrain_presult() throw() {}

  Terrain* success;

  _VISTAS_getTerrain_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VISTASClient : virtual public VISTASIf {
 public:
  VISTASClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  VISTASClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getTerrain(Terrain& _return, const std::string& fileName);
  void send_getTerrain(const std::string& fileName);
  void recv_getTerrain(Terrain& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VISTASProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<VISTASIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (VISTASProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getTerrain(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VISTASProcessor(boost::shared_ptr<VISTASIf> iface) :
    iface_(iface) {
    processMap_["getTerrain"] = &VISTASProcessor::process_getTerrain;
  }

  virtual ~VISTASProcessor() {}
};

class VISTASProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VISTASProcessorFactory(const ::boost::shared_ptr< VISTASIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< VISTASIfFactory > handlerFactory_;
};

class VISTASMultiface : virtual public VISTASIf {
 public:
  VISTASMultiface(std::vector<boost::shared_ptr<VISTASIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VISTASMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VISTASIf> > ifaces_;
  VISTASMultiface() {}
  void add(boost::shared_ptr<VISTASIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getTerrain(Terrain& _return, const std::string& fileName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTerrain(_return, fileName);
    }
    ifaces_[i]->getTerrain(_return, fileName);
    return;
  }

};

} // namespace

#endif
